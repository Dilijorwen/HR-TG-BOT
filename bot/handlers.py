import json
import pathlib
import yaml
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.filters.command import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, Contact, ReplyKeyboardRemove
from asyncpg import Pool

from .states import RecruitFlow
from .keyboards import ask_phone_kb, remove_kb


SCENARIOS = yaml.safe_load(
    pathlib.Path(__file__).with_name("scenarios.yml").read_text(encoding="utf-8")
)

def register_handlers(dp, db_pool: Pool) -> None:
    router = Router()

    @router.message(CommandStart())
    async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
        vacancy_code = command.args
        script = SCENARIOS.get(vacancy_code)

        if not vacancy_code or not script:
            await message.answer(
                "‚ö†Ô∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∫–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ HR –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
            )
            return

        await message.answer(f"""üëã –ü—Ä–∏–≤–µ—Ç!

–Ø —á–∞—Ç-–±–æ—Ç HR-–∫–æ–º–∞–Ω–¥—ã. –ü–æ–º–æ–≥—É –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{vacancy_code}¬ª.

–û—Ç–≤–µ—Ç—ã –∑–∞–π–º—É—Ç 2‚Äì3 –º–∏–Ω—É—Ç—ã –∏ —Å—Ä–∞–∑—É –ø–æ–ø–∞–¥—É—Ç –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.  
–ù–∞—á–Ω—ë–º!"""
                                 )

        # 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        await message.answer(script["intro"], parse_mode="Markdown")

        # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM
        await state.update_data(
            vacancy=vacancy_code,
            answers={},
            q_index=0,
            started_at=datetime.utcnow().isoformat(),
        )

        # 3) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        await ask_next_question(message, state, script)

    async def ask_next_question(
        message: Message,
        state: FSMContext,
        script: dict,
    ) -> None:
        data = await state.get_data()
        idx = data["q_index"]
        questions = script["questions"]

        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã ‚ûú —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if idx >= len(questions):
            await save_candidate_to_db(message, state, db_pool)
            return

        q = questions[idx]
        kb = ask_phone_kb if q.get("keyboard") == "ask_phone" else remove_kb

        await message.answer(q["text"], reply_markup=kb)
        await state.set_state(RecruitFlow.asking)

    @router.message(RecruitFlow.asking)
    async def collect_answer(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        vacancy = data["vacancy"]
        script = SCENARIOS[vacancy]
        idx = data["q_index"]
        questions = script["questions"]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç/–∫–æ–Ω—Ç–∞–∫—Ç
        answer_text = (
            message.contact.phone_number
            if isinstance(message.contact, Contact)
            else message.text.strip()
        )

        answers = data["answers"]
        answers[questions[idx]["id"]] = answer_text

        # –û–±–Ω–æ–≤–ª—è–µ–º FSM –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        await state.update_data(q_index=idx + 1, answers=answers)
        await ask_next_question(message, state, script)

    async def save_candidate_to_db(
        message: Message,
        state: FSMContext,
        pool: Pool,
    ) -> None:
        data = await state.get_data()

        await pool.execute(
            """
            INSERT INTO candidates (tg_id, vacancy, answers)
            VALUES ($1, $2, $3::jsonb)
            """,
            message.from_user.id,
            data["vacancy"],
            json.dumps(data["answers"]),
        )

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! üéâ –ê–Ω–∫–µ—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–∑—É—á–∏–º –æ—Ç–≤–µ—Ç—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

    dp.include_router(router)
