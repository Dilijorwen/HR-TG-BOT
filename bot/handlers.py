from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.filters.command import CommandObject
from aiogram.types import Message, Contact
from asyncpg import Pool
from .states import RecruitFlow
from .keyboards import ask_phone_kb, remove_kb

router = Router()

def register_handlers(dp, db: Pool):
    # –ü–æ–¥–≤—è–∑—ã–≤–∞–µ–º DB-–ø—É–ª —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–µ
    @router.message(CommandStart())  # —Ñ–∏–ª—å—Ç—Ä –æ—Å—Ç–∞—ë—Ç—Å—è
    async def cmd_start(
            message: Message,
            command: CommandObject,  # ‚Üê –æ–±—ä–µ–∫—Ç —Å —Ä–∞–∑–±–æ—Ä–æ–º /start
            state: FSMContext
    ):
        vacancy_code = command.args  # –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ /start

        if not vacancy_code:  # deep-link –ø—É—Å—Ç–æ–π
            await message.answer(
                "‚ö†Ô∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –Ω–∞–ø—Ä—è–º—É—é. "
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ HR –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
            )
            return

        await state.update_data(vacancy=vacancy_code)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(RecruitFlow.full_name)

    @router.message(RecruitFlow.full_name)
    async def get_name(msg: Message, state: FSMContext):
        await state.update_data(full_name=msg.text.strip())
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=ask_phone_kb)
        await state.set_state(RecruitFlow.phone)

    @router.message(RecruitFlow.phone, F.contact)
    async def get_phone(msg: Message, state: FSMContext):
        phone: Contact = msg.contact
        await state.update_data(phone=phone.phone_number)
        await msg.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —É –í–∞—Å –ø–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ?", reply_markup=remove_kb)
        await state.set_state(RecruitFlow.experience)

    @router.message(RecruitFlow.experience)
    async def get_exp(msg: Message, state: FSMContext):
        await state.update_data(experience=msg.text.strip())
        data = await state.get_data()
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
        await save_candidate(db, msg.from_user.id, **data)
        await msg.answer(
            "–°–ø–∞—Å–∏–±–æ! üéâ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É. "
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        await state.clear()

    dp.include_router(router)


async def save_candidate(db: Pool, tg_id: int, **data):
    query = """
        INSERT INTO candidates (tg_id, vacancy, full_name, phone, experience)
        VALUES ($1, $2, $3, $4, $5)
    """
    await db.execute(
        query,
        tg_id, data["vacancy"], data["full_name"],
        data["phone"], data["experience"]
    )